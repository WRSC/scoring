#!/usr/bin/python3
"""
Analyse the result of a station keeping attempt
"""

import bisect
import csv
import sys

from pyproj import Proj
import math
import datetime

utm_zone = 30


projection = Proj(proj='utm', zone=utm_zone, ellps='WGS84')

def latlon_to_utm(lat, lon):
    """Returns (x, y) coordinates in metres"""
    return projection(lon, lat)

# CSV values
# ISO 8601
# Lat 
# Lon
# 
#  y^
#   |
#   +-> x

CENTER = (50.82083333, -1.310983333)  # Calshot sailboats
CENTER = (50.82046666, -1.311983333)  # Calshot micro-sailboats

CENTER_utm = latlon_to_utm(CENTER[0], CENTER[1])

def dist2center(M):
    return dist2wp(M, CENTER_utm)


def dist2wp(M, wp):
    return math.sqrt((M[0]-wp[0])**2 + (M[1] - wp[1])**2) 

def convertToSec(timeString): #TODO
    # hh mm ss dd
    hours = int(timeString[0:2])
    minutes = int(timeString[2:4])
    seconds = int(timeString[4:6])
    time = hours * 60 * 60 + minutes * 60 + seconds
    return time

FILE = sys.argv[1]

# Competition rules
RADIUS = 20 # 20 m
TIMESPAN = 5 * 60   # 5 minutes

time = []
positions_utm = []

# Read file
with open(FILE) as logfile:
    data = csv.reader(logfile, delimiter=',')
    for row in list(data)[1:]:
        time.append(datetime.datetime.strptime(row[0], "%Y-%m-%dT%H:%M:%SZ").timestamp()) #store epoch
        latitude = float(row[1])
        longitude = float(row[2])
        positions_utm.append(latlon_to_utm(latitude, longitude))


# iterate through points:
# Find first point in 20 m radius
idx = 0
distance = 23
while distance > RADIUS:
    idx +=1
    distance = dist2center(positions_utm[idx])

## get time of that point
startTime = time[idx]

# get all points from the next 5 minutes
endTime = startTime + TIMESPAN
endIdx = bisect.bisect(time, endTime)
if endIdx >= len(positions_utm):
    print("end of 5 minute position keeping not in dataset!")

positionsOfInterest = positions_utm[idx:endIdx]

minute_idx = bisect.bisect(time, startTime + 60)
first_minute = positionsOfInterest[idx:minute_idx]
print('%d points in first minute' % minute_idx)
for point in first_minute:
    distance = dist2center(point)
    if distance > 20:
        print('Left 20m circle during first minute')
        break
else:
    print('Stayed within 20m during first minute :-)')

print('Using %d points' % len(positionsOfInterest))

# get Pc
# sum up x and y positions to get Pc
averageX = 0.
averageY = 0.
for point in positionsOfInterest:
    averageX += point[0]
    averageY += point[1]

Pc = (averageX / len(positionsOfInterest), averageY / len(positionsOfInterest))

if dist2center(Pc) > RADIUS:
    print("Pc is outside the 20 m circle!")

# calculate distance to Pc for all points
Pc_distances = []
for point in positionsOfInterest:
    distance = dist2wp(point, Pc)
    Pc_distances.append(distance)

# remove 5% of points with largest distance to Pc
# find next largest distance, this is the radius
Pc_distances.sort()
#print(Pc_distances)
idx_95 = int(round(len(Pc_distances) * 0.95))
considered_95 = Pc_distances[0:idx_95]
finalRadius = considered_95[-1]
print("The position keeping radius is " + str(finalRadius))
