#!/usr/bin/python
# -*- coding: utf-8 -*-

import csv
import sys
# import yaml
# from sailing_robot.navigation import Navigation

from LatLon import LatLon
from pyproj import Proj
import numpy as np

utm_zone = 30


projection = Proj(proj='utm', zone=utm_zone, ellps='WGS84')

def latlon_to_utm(lat, lon):
    """Returns (x, y) coordinates in metres"""
    return projection(lon, lat)

def utm_to_latlon(x, y):
    """Returns a LatLon object"""
    lon, lat = projection(x, y, inverse=True)
    return LatLon(lat, lon)




# CSV values
# hhmmssdd
# Lat *10^^7
# Lon *10^^7
# 
#  y^
#   |
#   +-> x
#

# A----B starting line
# C = [   ] list of buoys
wpA
wpB
wpC = [( , ), ( , )   ]
RADIUS = 5 #acceptance radius in m


wpA_utm = latlon_to_utm(wpA[0], wpA[1])
wpB_utm = latlon_to_utm(wpB[0], wpB[1])

wpc_utm = [ latlon_to_utm(wp[0], wp[1]) for wp in wpC ]

def isBeforeLine(A, B, M):
     return ((B[0] - A[0])*(M[1] - A[1]) - (B[1] - A[1])*(M[0] - A[0])) > 0 # TODO check sign!!!

def isWpReached(M, wp):
    return np.linalg.norm(M-wp) < RADIUS

cvs_file = sys.argv[1]

position_utm = []
with open(cvs_file) as logfile:
    data = csv.reader(logfile, delimiter=',')
    for row in data:
        latitude = float(row[1])/10**7
        longitude = float(row[2])/10**7
        position_utm.append(latlon_to_utm(latitude, longitude))





